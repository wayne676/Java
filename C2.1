8 primitive type 
4整型 2浮点型 1boolean型 1用于表示unicode编码的char型
int 4bytes (超过20亿) 
short 2byes
long 8biyes
byte 1byte
长整型可加后缀L 4000000000L
十六进制0x 八进制0 但是八进制的前缀容易混淆
二进制0b 数字字面量可以加下划线如1_000_000表示一百万，下划线只是为了容易阅读。编译器会自动去除这些下划线。
C和C++中int和处理器相关
float 4bytes 有效位数 6-7位
double 8bytes 有效位数15

三个特殊的浮点值用于表示溢出和出错：
正无穷大
负无穷大
NaN（不是一个数字）
例如正整数除以0结果无穷大。0/0或者负数的平方根是NaN。
Double.POSITIVE_INFINITE Double.NEGATIVE_INFINITE Double.NaN
检测x是不是一个NaN要
if(Double.isNaN(x))
下面的是错的
if(x == Double.NaN)// is never true

警告！WARINGN：
浮点数值不适用于禁止出现舍入运算的金融领域。例如System.out.println（2.0-1.1）将打印出0.8999999999999999999，而不是0.9。
主要原因是浮点数值采用二进制系统表示。二进制系统无法精确表示分数1/10。就像十进制无法精确表示1/3.
这种情况下应该使用 BigDecimal 类。

char类型用于表示单个字符。例如：'A'是编码65对应的字符常量。与"A"不同，"A"是一个包含字符A的字符串。Unicode编码单元可以表示为十六进制值，其范围从
\u0000到\uffff。例如：\u03C0表示希腊字母π
转义序列符号\u可以出现在字符常量或字符串的引号之外
public static void main(String \u005B\u005D args)
以上这种形式符合语法规则 \u005B和\u005D是[和]的编码

代码单元：UTF-8中是用8个字节表示的，UTF-16中使用16个字节表示的等等。
Char： 在java中是采用UTF-16编码的，也就是说，Char是代表一个代码单元。
代码点：对应各种真正字符（char不是真正的字符，是代码单元）的Unicode编码。一个代码点可能对应一对代码单元，如辅助字符。是指编码字符集中，字符所对应的数字。有效范围从U+0000到U+10FFFF。其中U+0000到U+FFFF为基本字符，U+10000到U+10FFFF为增补字符
也正是因为以上原因，在Java中，不赞成使用Char类型，因为它并不能代表一个真正的字符，而只是代码单元，而操作中，我们往往想得到的是真正的字符，而不是代码单元char。
对代码点进行编码得到的1或2个16位序列（UTF-16）。其中基本字符的代码点直接用一个相同值的代码单元表示，增补字符的代码点用两个代码单元进行编码，编码值来自U+D800到U+DFFF，这个范围内没有数字用于表示字符，因此程序可以识别出当前字符是单单元的基本字符，还是双单元的增补字符。
str.length()返回的的是采用UTF－16编码表示的给定字符串所需要的代码单元数量。
要想得到实际的长度即代码点数量，可以调用:
int  cpCount= str.codePointCount(0,str.length())

String a="\u03C0 \uD835\uDD6B";
	int b=a.codePointCount(0, a.length());
		System.out.println(b);              //3个
		System.out.println(a.length());     //4个
然后str.charAt(n)返回的是位置n的代码单元
要想得到第i个代码点:
int index = str.offsetByCodePoints(0,i)
int cp=str.codePointAt(index)//返回指定位置的unicode码值

遍历一个字符串，并且依次查看每个代码点:
int cp=str.codePointAt(i);
if(Character.isSupplementaryCodePoint(cp)) i+=2
else i++;
以下语句实现回退操作:
i--;
if(Character.isSurrogate(str.charAt(i)))i--;
in cp=str.codePointAt(i)

常量
final用来指示常量，一旦赋值不能更改。常量名使用全大写。
final double PI＝3.1415932653
在Java中，static final设置类常量，即静态常量。
public class SimpleSample{
  public static final double PI=3.14159// or private
  public static void main(String[] args)
  {
    …………//code goes here
  }
}
  
n++ 先运算在加一
++n 先加一在运算

condition ? expression1 : expression2
x < y ? x : y
条件为真返回走x，否则走y

数学函数
Math.sin() Math.exp() ……
数学常量
Math.PI Math.E
在源文件顶部加入 import static java.lang.Math.* 则可以不需要加前缀"Math"

数值类型转换
小字节类型的数值可以无损转换大字节类型
例如: float->double  byte->short->int->long
如果转换方向相反则会丢失一定精度

强制转换(cast)
double x=9.997
int nx= (int) x;// nx=9
可以对浮点数进行舍入运算，以便得到最接近的整数: Math.round
double x=9.997
int nx = (int) Math.round(x);// nx=10
ps:round返回类型为long所以需要强制转换int

枚举类型
enum Size{SMALL, MEDUIM, LARGE, EXTRA_LARGE};
此时可以声明这种类型的变量: 
Size s=Size.MEDUIM;
Size类型的变量只能存储在这个类型声明中给定的某个枚举值，或者null值。

字符串
从概念上来讲，Java字符串就是Unicode的字符序列。例如: 串“Java™”就是由5个Unicode字符J,a,v,a,和™。
Java没有内置的字符串类型，是在标准Java类库中提供了一个预定义类String。每个用双引号括起来的字符串都是String类的一个实例: 
String e = "";
String greeting="Hello"

子串
String gretting="Hello"
String s=greeting.substring(0,3);//s的值为"Hel"
substring方法的第二个参数是 不想 被复制的的起始位置。所以 s 只截取了0，1，2这三个字符

拼接
可直接使用 ＋ 号进行连接（拼接）两个字符串。

Inmutabe
Java字符串是不可修改的。但指向其的变量可以改变指向的内容。

检测字符串是否相等
s.equals(t)//相等返回true, 不等返回false。
s和t可为字符串变量或常量
"Hello".equalsIgnoreCase("hello")//不区分大小写比较
一定不能使用 == 运算符 因为这个运算符只能确定两个字符串是否放置在同一个位置上。

空串和Null串
str.length()==0 或者 str.equals("")
String 对象可以存放null表示目前没有任何对象与改变量关联。就和普通的类的对象置为null一样
检查字符串既不null也不空
if(str!=null && str.length()!=0)

Java API 联机文档:
http://docs.oracle.com/javase/7/docs/api/
目前只看到Java7没见到Java8

构建字符串
由较短的字符串构建字符串时，字符串连接的方式效率较低。每次连接都会构建一个新的String对象，耗时也浪费空间。这里使用StringBuilder类来避免这个问题。
StringBuilder builder=new StringBuilder();
当需要添加一部分内容调用append()方法
builder.append(ch);
builder.append(str);
需要构建字符串时，调用toString方法，就可以得道一个String对象，其中包含了builder中的字符序列
String completedString=builder.toString();

输入输出
打印输出到"标准输出流"调用System.out.println即可。读取"标准输入流"System.in，要先构造一个Scanner对象，并与"标准输入流"System.in关联。
Scanner in = new Scanner(System.in);
现在可以使用Scanner类的各种方法实现输入操作了。
例如nextLine方法将输入一行
System.out.println("what is your name");
String name=in.nextLine();
读取一个单词是next()，读取一个整数是nextInt(),还有nextDouble()
System.out.println("how old r u");
int age=in.nextInt();
上面代码在控制台输入的时候可以输入多个单词或者数字并以空格分分隔，但是回车后读入的只有第一个单词或者数字。
并且Scanner类定义在java.util包中，所以在文件头部要使用import java.util.*

格式化输出
Java沿袭了C的printf方法
System.out.printf("%8.2f",x);// if x=123.4567 output will be 123.45
System.out.printf("Hello %s your number is %d", name age);
日期也可以格式化输出
System.out.printf("%tc",new Date());//c表示完整的日期和时间
t后的c也可以换成其他的字母详细的可以自己查阅

文件输入与输出
读取文件与控制台读取输入类似，用File对象构造一个Scanner对象
Scanner in = new Scanner(Paths.get("myfile.txt")); //Scanner(File f or String data)
如果没有Path.get()那么scanner将会把"myfile.tetx"当作字符串解释
如果文件名中包含反斜杠符号，每个反斜杠前面再加一个反斜杠:
"c:\\mydirectory\\myfile.txt"。
之后就可以利用前面的Scanner方法对文件进行操作了。
写入文件就构造一个PrintWriter对象，构造器只需要提供文件名:
PrintWriter out=new PrintWriter("c:\\mydirectory\\myfile.txt");
如果文件不存在，创建该文件。可以像输出到System.out一样使用print，println，printf命令

Switch语句
int choice=in.nextInt();
switch (choice)
{
case 1: 
	...
	break;
case 2:
	...
	break;
deafult:
	...
	break;
}
case标签可以是char，byte，short，int(或者其他包装器类Character, Byte, Short, Integer), 枚举常量和字符串字面量

大数值
BigInteger和BigDecimal
静态方法valueOf将普通的数值转换成大数值
BigInteger a = BigInteger.valueOf(100);
大数值运算
BigInteger c = a.add(b);
BigInteger d = c.multiply(b.add(BigInteger.valueOf(2)));//d=c*(b+2)

数组
声明 int[] a;
new创建数组
int[] a = new int[100];
数组长度不要求常量: new int［n］会创建一个长度为n的数组。
int型数组初始化为0。
boolean型为false
object型(String也是对象)为null
数组长度or数组中元素个数array.length

可以直接初始化数组并赋值的简写形式子:
int smallPrimes = {2,3,5,7};

匿名数组，因为没有名字所以不能重用
Java5前没有可变参数，可以涌来传递可变参数
sum(new int[] {1,2,3,4})
或者重新初始化一个数组
smallPrimes＝new int[] {11,13,17,19};
传统方法
for(int i = 0;i < a.length; i++)
	System.out.println(a[i]);
for each循环
for(variable : collection) statement
例如:
for (int var : a)
	System.out.println(var);
简单的打印数组所有值，Arrays类的toString方法(数组是对象，但不是Arrays对象，其父类是object类)。

数组拷贝
int[] luckyNumbers=smallPrimes;//两个变量指向同一个数组
真.拷贝
int[] copiedLuckyNumbers=Arrays.toCopy(luckyNumbers,luckyNumbers.length);//两个变量两个数组
长度相同则完美复制, 短了只复制前面的, 长了则后面的与初始化一样0或者false或者null。

命令行参数
每一个Java应用程序都有一个带String args[]参数的main方法。这个参数表面main方法将接收一个字符串数组，也就是命令行参数。
public class Message{
	public static void main(String[] args){
		if(args[0].equals("-h"))
			System.out.print("Hello,");
		else if(args[0].equals("-g");
		for(int i=1;i<args.length;i++)
			System.out.print(" "+args[i]);
		System.out.println("!");
	}
}
如果使用下面这种形式运行这个程序
java Message -g cruel world
args数组将包含下列内容:
args[0]: "-g"
args[1]: "cruel"
args[2]: "world"
这个程序将显示下列信息:
Goodbye, cruel world!

数组排序 还是Arrays类中的方法: Arrays.sort(a)
目前Arrays类中方法 1: Arrays.toString() 2: Arrays.toCopy() 3: Arrays.sort()
另外还有查找 Arrays.binarySearch(type[] a, type v)//返回值为int, 查找成功返回下标，失败, 则返回一个负数。
也可以指定查找范围Arrays.binarySearch(type[] a, int start, int end, type v)
static void fill(type[] a, type v)
static boolean equals(type[] a, type[] b)//完全相同则返回真
另注意 数组只可以用于基本类型

二维数组
要么直接初始化，要么声明后new
int[][] magicSquare={{1,2,3,4}{2,3,4,5}{3,4,5,6}{4,5,6,7}}
double[][] balances;
balances=new double[NYEARS][NRATES];

遍历时候要么是普通的嵌套循环遍历, 要么for each嵌套循环遍历
for(double[] row:a)
	for(double value:row)
		do something with value
多维不规则数组
int[][] odds=new int[NMAX+1][];
for(int n=0;n<=NMAX;n++)
	odds[n]=new int[n+1];
