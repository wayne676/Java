封装 encapsulation 
对象的状态state指对象一组特定的实例域的值。

开发就是设计 类->方法和实例域

构造器的名字应该与类名一样。

Java中 Date类表示时间 GregorianCalendar类表示日期，Calendar类作为更通用的日期类扩展于GregorianCalendar

多个源文件的使用
许多程序员习惯每一个类存在一个单独的源文件中。例如: Employee类存放在文件Employee.java中，将EmployeeTest类存放在文件EmployeeTest.java中。
这种情况有两种编译源程序的方法
1: javac Employee*.java
2: javac EmployeeTest.java
使用第二种方式当Java编译器发现EmployeeTest.java使用了Employee类时，会查找Employe.class的文件。
如果没有找到这个文件, 就会自动搜索Employee.java然后对他进行编译。

如果要访问一个可变对象的引用的时候需要对该对象进行clone
return hireDay.clone();
否则会出现
Employee hary=...;
Date d=hary.getHireDay();
此时对d操作hary也会出现相关反应

私有方法 单例模式
public class Singleton{
  private static Singleton instance;
  private Singleton(){}
  
  public static Singleton getInstance(){
    if(instance == null){
      instance = new Singleton();
    }
    return instance;
  }
}
单例的使用public class SingletonPatternDemo {
   public static void main(String[] args) {

      //不合法的构造函数
      //编译时错误：构造函数 SingleObject() 是不可见的
      //SingleObject object = new SingleObject();

      //获取唯一可用的对象
      SingleObject object = SingleObject.getInstance();

      //显示消息
      object.showMessage();
   }
}

final实例域
构建对象时必须初始化, 初始化以后值的域还不能被改变。
大都用语基本类型域或immutable类(域中的每个方法都不会改变其对象, String类就是一个不可变的类)的域。

静态方法和静态域

每一个类都可以有一个main方法。这是一个常用于对类进行单元测试的技巧。
main方法使用时不对任何对象进行操作。事实上, 程序启动时还没有任何一个对象。静态的main方法将执行程序并创建所需要的对象。

方法参数
Java是按值调用, 有 3 种情况:
1: 一个方法不能修改一个基本数据类型的参数 //如double(x)之后, x的值并没有改变
2: 一个方法可以改变一个对象参数的状态
3: 一个方法不能让对象参数引用一个新的对象 //就像swap函数

Overloading 重载
方法名相, 参数类型不同。返回类型不算在内。

不写构造器, 系统会自动提供一个默认的无参构造器。并将实例域设为默认值。
如果自己写了构造器, 系统就不会提供了, 如果此时没有写无参构造器而又调用了他, 那么不合法。

调用另一个构造器
public Empolyee(double s){
  //calls Employee(String, double)
  this("Empolyee #"+nextId, s);
  nextId++;
}
当调用new Employee(70000)时,Employee(double)将调用Employee(String, double)

初始化数据域
1: constructor
2: 声明中赋值
3: 初始化块 //其实就是声明以后用大括号括起来再赋值

对象析构与finalize方法
Java不支持析构器, 但可以为任何一个类添加finalize方法。finalize方法将在垃圾回收期清除对象之前调用。

类的导入
import java.util.*
可以使用此包中的所有类
类名冲突
import java.util.*;
import java.sql.*;
Date today;//Error-- java.util.Date or  java.sql.Date?
Date类在util和sql中都存在, 此时
1: 只用到一个Date类
import java.util.*;
import java.sql.*;
import java.util.Date;
2: 两个都要用, 则使用完整名字
import java.util.*;
import java.sql.*;
java.util.Date deadline = new java.util.Date();
java.sql.Date today = new java.sql.Date(...);

静态导入
import static java.lang.System.*;
可以使用System类中的静态方法和静态域而不必加类名前缀:
out.println("Doodou World!");
也可以导入特定的方法
import static java.lang.System.out;
